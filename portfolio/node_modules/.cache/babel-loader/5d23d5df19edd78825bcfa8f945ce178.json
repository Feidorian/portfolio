{"ast":null,"code":"var _jsxFileName = \"/home/brian/portfolio/portfolio-app-beta/portfolio/src/components/Courses.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Grid, Paper, Stack, Typography } from \"@material-ui/core\";\nimport { indigo, pink, teal, red, green, deepOrange, deepPurple, grey } from '@material-ui/core/colors';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  code: 'CMSC 411',\n  name: \"Computer Systems Architecture\",\n  term: \"UMD Spring 2021\",\n  summary: \"Input/output processors and techniques. Intra-system communication, \\\n        buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining.\",\n  concepts: \"C, linux\"\n}, {\n  code: 'CMSC 389N',\n  name: \"A Introduction to PHP and Javascript\",\n  term: \"UMD Spring 2021\",\n  summary: \"An introduction to the development of single page Web-based applications (SPA's) using JavaScript \\\n                for both the front end client and back-end api/service. We will be devleoping applications using a micro-service \\\n                architecture pattern and discussing throughout the evolution of web application architectures and current trends.\",\n  concepts: \"HTML, CSS, Javascript, Node.js, React, Boostrap, express\"\n}, {\n  code: 'CMSC 320',\n  name: \"Introduction to Data Science\",\n  term: \"UMD Spring 2021\",\n  summary: \"An introduction to the data science pipeline, i.e., the end-to-end process of going from unstructured, \\\n        messy data to knowledge and actionable insights. Provides a broad overview of several topics including statistical \\\n        data analysis, basic data mining and machine learning algorithms, large-scale data management, cloud computing, and \\\n        information visualization.\",\n  concepts: \"Python, Docker, Jupyter\"\n}, {\n  code: 'CMSC 436',\n  name: \"Programming Handheld Systems: Android\",\n  term: \"UMD Fall 2020\",\n  summary: \"Fundamental principles and concepts that underlie the programming of handheld systems, such as mobile phones, \\\n        personal digital assistants, and tablet computers. Particular emphasis will be placed on concepts such as limited display size, \\\n        power, memory and CPU speed; and new input modalities, where handheld systems differ substantially from non-handheld systems, and \\\n        thus require special programming tools and approaches. Students will apply these concepts and principles in the context of an \\\n        existing handset programming platform.\",\n  concepts: \"Android Studio, Kotlin, Firebase\"\n}, {\n  code: 'CMSC 435',\n  name: \"Software Engineering\",\n  term: \"UMD Fall 2020\",\n  summary: \"State-of-the-art techniques in software design and development. Laboratory experience in applying the \\\n        techniques covered. Structured design, structured programming, top-down design and development, segmentation and \\\n        modularization techniques, iterative enhancement, design and code inspection techniques, correctness, and chief-programmer \\\n        teams. The development of a large software project.\",\n  concepts: \"Javascript, CSS, React, Python, electron, HTML\"\n}, {\n  code: 'CMSC 424',\n  name: \"Database Design\",\n  term: \"UMD Fall 2019\",\n  summary: \"Students are introduced to database systems and motivates the database approach as a \\\n        mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, \\\n        query languages, and other database concepts including query optimization, concurrency control; transaction management, \\\n        and log based crash recovery. Distributed and Web database architectures are also discussed.\",\n  concepts: \"Postgress, C, linux\"\n}, {\n  code: 'CMSC 420',\n  name: \"Advanced Data Structures\",\n  term: \"UMD Spring 2020\",\n  summary: \"Description, properties, and storage allocation functions of data structures including balanced binary trees, \\\n        B-Trees, hash tables, skiplists, tries, KD-Trees and Quadtrees. Algorithms for manipulating structures. Applications \\\n        from areas such as String Processing, Computer Graphics, Information Retrieval, Computer Networks, Computer Vision, and Operating Systems.\",\n  concepts: \"jAVA\"\n}, {\n  code: 'CMSC 351',\n  name: \"Algorithms\",\n  term: \"UMD Spring 2019\",\n  summary: \"A systematic study of the complexity of some elementary algorithms related to sorting, \\\n        graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations.\"\n}, {\n  code: 'CMSC 330',\n  name: \"Organization of Programming Languages\",\n  term: \"UMD Fall 2019\",\n  summary: \"A study of programming languages, including their syntax, semantics, and implementation. Several different \\\n        models of languages are discussed, including dynamic, scripting functional \\\n        , and memory safe systems programming. Explores language features such as formal syntax, scoping \\\n            and binding of variables, higher-order programming, typing, and type polymorphism. Introduces finite automata, context \\\n            free grammar, parsing, lambda calculus, and basics of security attacks and software security.\",\n  concepts: \"Ocaml, Ruby, Rust\"\n}, {\n  code: 'CMSC 250',\n  name: \"Discrete Structures\",\n  term: \"Spring 2018\",\n  summary: \"Fundamental mathematical concepts related to computer science, including finite and infinite sets, \\\n        relations, functions, and propositional logic. Introduction to other techniques, \\\n        modeling and solving problems in computer science. Introduction to permutations, combinations, \\\n        graphs, and trees with selected applications.\",\n  concepts: \"\"\n}, {\n  code: 'CMSC 216',\n  name: \"Introduction to Computer Systems\",\n  term: \"Spring 2018\",\n  summary: \"Introduction to the interaction between user programs and the operating system/hardware. \\\n        Major topics include C programming, introductory systems programming, and assembly language. \\\n        Other concepts covered include UNIX, machine data representation, thread management, optimization, and virtual memory. \\\n        Programming is done in the Linux Environment.\",\n  concepts: \"C, Assembly, Linux, MobaXterm(remote SSH)\"\n}, {\n  code: 'CMSC 132',\n  name: \"Object Oriented Programming II\",\n  term: \"UMD Spring 2018\",\n  summary: \"Introduction to use of computers to solve problems using software engineering principles. \\\n        Design, build, test, and debug medium -size software systems and learn to use relevant tools. \\\n        Use object-oriented methods to create effective and efficient problem solutions. \\\n        Use and implement application programming interfaces (APIs). Programming done in Java\",\n  concepts: \"Java, Eclipse IDE\"\n}, {\n  code: 'CMSC 131',\n  name: \"Object Oriented Programming I\",\n  term: \"UMD Fall 2017\",\n  summary: \"Introduction to programming and computer science. \\\n        Emphasizes understanding and implementation of applications using object- oriented techniques. \\\n        Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. \\\n        Programming done in Java.\",\n  concepts: \"Java, Eclipse IDE\"\n}];\n\nfunction Courses() {\n  _s();\n\n  const [masonWidth, setMasonWidth] = useState((window.innerWidth / 420).toFixed());\n\n  const setWidth = () => setMasonWidth((window.innerWidth / 420).toFixed());\n\n  useEffect(() => {\n    window.addEventListener('resize', setWidth);\n    return () => window.removeEventListener('resize', setWidth);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    backgroundColor: \"re\",\n    width: \"98%\",\n    overflow: \"auto\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    my: 1,\n    p: 1,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      width: \"100%\",\n      px: 4,\n      children: /*#__PURE__*/_jsxDEV(ResponsiveMasonry, {\n        columnsCountBreakPoints: {\n          1: masonWidth\n        },\n        children: /*#__PURE__*/_jsxDEV(Masonry, {\n          children: data.map(item => /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: \"3\",\n            m: 1,\n            component: Stack,\n            minWidth: 340,\n            spacing: 2,\n            sx: {\n              p: 1,\n              borderRadius: '0.5rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              justifyContent: \"space-between\",\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                children: item.code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                children: item.term\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              textAlign: \"center\",\n              fontSize: \"1.2rem\",\n              fontWeight: \"500\",\n              color: teal[900],\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              textAlign: \"center\",\n              color: indigo[900],\n              children: item.summary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              textAlign: \"center\",\n              color: deepOrange[900],\n              children: item.concepts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Courses, \"rXU5C5xW8DNzIvehp0Gv9B/dcgQ=\");\n\n_c = Courses;\n;\nexport default Courses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Courses\");","map":{"version":3,"sources":["/home/brian/portfolio/portfolio-app-beta/portfolio/src/components/Courses.js"],"names":["Box","Grid","Paper","Stack","Typography","indigo","pink","teal","red","green","deepOrange","deepPurple","grey","Masonry","ResponsiveMasonry","useState","useEffect","data","code","name","term","summary","concepts","Courses","masonWidth","setMasonWidth","window","innerWidth","toFixed","setWidth","addEventListener","removeEventListener","map","item","p","borderRadius"],"mappings":"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","sourcesContent":["import { Box, Grid, Paper, Stack, Typography } from \"@material-ui/core\";\nimport { indigo, pink, teal, red, green, deepOrange, deepPurple, grey } from '@material-ui/core/colors';\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\nimport { useState, useEffect} from \"react\";\n\nconst data =[\n    {\n        code: 'CMSC 411',\n        name: \"Computer Systems Architecture\",\n        term: \"UMD Spring 2021\",\n        summary: \"Input/output processors and techniques. Intra-system communication, \\\n        buses, caches. Addressing and memory hierarchies. Microprogramming, parallelism, and pipelining.\",\n        concepts: \"C, linux\"\n    },\n    {\n        code: 'CMSC 389N',\n        name: \"A Introduction to PHP and Javascript\",\n        term: \"UMD Spring 2021\",\n        summary: \"An introduction to the development of single page Web-based applications (SPA's) using JavaScript \\\n                for both the front end client and back-end api/service. We will be devleoping applications using a micro-service \\\n                architecture pattern and discussing throughout the evolution of web application architectures and current trends.\",\n        concepts: \"HTML, CSS, Javascript, Node.js, React, Boostrap, express\"\n    },\n    {\n        code: 'CMSC 320',\n        name: \"Introduction to Data Science\",\n        term: \"UMD Spring 2021\",\n        summary: \"An introduction to the data science pipeline, i.e., the end-to-end process of going from unstructured, \\\n        messy data to knowledge and actionable insights. Provides a broad overview of several topics including statistical \\\n        data analysis, basic data mining and machine learning algorithms, large-scale data management, cloud computing, and \\\n        information visualization.\",\n        concepts: \"Python, Docker, Jupyter\"\n    },\n    {\n        code: 'CMSC 436',\n        name: \"Programming Handheld Systems: Android\",\n        term: \"UMD Fall 2020\",\n        summary: \"Fundamental principles and concepts that underlie the programming of handheld systems, such as mobile phones, \\\n        personal digital assistants, and tablet computers. Particular emphasis will be placed on concepts such as limited display size, \\\n        power, memory and CPU speed; and new input modalities, where handheld systems differ substantially from non-handheld systems, and \\\n        thus require special programming tools and approaches. Students will apply these concepts and principles in the context of an \\\n        existing handset programming platform.\",\n        concepts: \"Android Studio, Kotlin, Firebase\"\n    },\n    {\n        code: 'CMSC 435',\n        name: \"Software Engineering\",\n        term: \"UMD Fall 2020\",\n        summary: \"State-of-the-art techniques in software design and development. Laboratory experience in applying the \\\n        techniques covered. Structured design, structured programming, top-down design and development, segmentation and \\\n        modularization techniques, iterative enhancement, design and code inspection techniques, correctness, and chief-programmer \\\n        teams. The development of a large software project.\",\n        concepts: \"Javascript, CSS, React, Python, electron, HTML\"\n    },\n    {\n        code: 'CMSC 424',\n        name: \"Database Design\",\n        term: \"UMD Fall 2019\",\n        summary: \"Students are introduced to database systems and motivates the database approach as a \\\n        mechanism for modeling the real world. An in-depth coverage of the relational model, logical database design, \\\n        query languages, and other database concepts including query optimization, concurrency control; transaction management, \\\n        and log based crash recovery. Distributed and Web database architectures are also discussed.\",\n        concepts: \"Postgress, C, linux\"\n    },\n    {\n        code: 'CMSC 420',\n        name: \"Advanced Data Structures\",\n        term: \"UMD Spring 2020\",\n        summary: \"Description, properties, and storage allocation functions of data structures including balanced binary trees, \\\n        B-Trees, hash tables, skiplists, tries, KD-Trees and Quadtrees. Algorithms for manipulating structures. Applications \\\n        from areas such as String Processing, Computer Graphics, Information Retrieval, Computer Networks, Computer Vision, and Operating Systems.\",\n        concepts: \"jAVA\"\n    },\n    {\n        code: 'CMSC 351',\n        name: \"Algorithms\",\n        term: \"UMD Spring 2019\",\n        summary: \"A systematic study of the complexity of some elementary algorithms related to sorting, \\\n        graphs and trees, and combinatorics. Algorithms are analyzed using mathematical techniques to solve recurrences and summations.\",\n    },\n    {\n        code: 'CMSC 330',\n        name: \"Organization of Programming Languages\",\n        term: \"UMD Fall 2019\",\n        summary: \"A study of programming languages, including their syntax, semantics, and implementation. Several different \\\n        models of languages are discussed, including dynamic, scripting functional \\\n        , and memory safe systems programming. Explores language features such as formal syntax, scoping \\\n            and binding of variables, higher-order programming, typing, and type polymorphism. Introduces finite automata, context \\\n            free grammar, parsing, lambda calculus, and basics of security attacks and software security.\",\n        concepts: \"Ocaml, Ruby, Rust\"\n    },\n   \n   \n    {\n        code: 'CMSC 250',\n        name: \"Discrete Structures\",\n        term: \"Spring 2018\",\n        summary: \"Fundamental mathematical concepts related to computer science, including finite and infinite sets, \\\n        relations, functions, and propositional logic. Introduction to other techniques, \\\n        modeling and solving problems in computer science. Introduction to permutations, combinations, \\\n        graphs, and trees with selected applications.\",\n        concepts: \"\"\n    },\n\n    {\n        code: 'CMSC 216',\n        name: \"Introduction to Computer Systems\",\n        term: \"Spring 2018\",\n        summary: \"Introduction to the interaction between user programs and the operating system/hardware. \\\n        Major topics include C programming, introductory systems programming, and assembly language. \\\n        Other concepts covered include UNIX, machine data representation, thread management, optimization, and virtual memory. \\\n        Programming is done in the Linux Environment.\",\n        concepts: \"C, Assembly, Linux, MobaXterm(remote SSH)\"\n    },\n\n    {\n        code: 'CMSC 132',\n        name: \"Object Oriented Programming II\",\n        term: \"UMD Spring 2018\",\n        summary: \"Introduction to use of computers to solve problems using software engineering principles. \\\n        Design, build, test, and debug medium -size software systems and learn to use relevant tools. \\\n        Use object-oriented methods to create effective and efficient problem solutions. \\\n        Use and implement application programming interfaces (APIs). Programming done in Java\",\n        concepts: \"Java, Eclipse IDE\"\n    },\n\n    {\n        code: 'CMSC 131',\n        name: \"Object Oriented Programming I\",\n        term: \"UMD Fall 2017\",\n        summary: \"Introduction to programming and computer science. \\\n        Emphasizes understanding and implementation of applications using object- oriented techniques. \\\n        Develops skills such as program design and testing as well as implementation of programs using a graphical IDE. \\\n        Programming done in Java.\",\n        concepts: \"Java, Eclipse IDE\"\n    },\n     \n]\n\n\nfunction Courses() {\n    const [masonWidth, setMasonWidth] = useState((window.innerWidth/420).toFixed());\n    const setWidth = () => setMasonWidth((window.innerWidth/420).toFixed());\n\n    useEffect(()=> {\n        window.addEventListener('resize', setWidth);\n        return ()=> window.removeEventListener('resize', setWidth)\n    })\n    return (\n        <Box backgroundColor='re' width='98%'  overflow='auto' display='flex' justifyContent='center' my={1} p={1}>\n            {/* <Grid container rowSpacing={2} p={1} alignItems='center' columnSpacing={{xs:0, sm:2}} backgroundColor='blu' justifyContent='center' maxWidth='90rem' flexWrap='wrap'>\n            {data.map(item =>\n                <Grid item width={{xs:1, sm:6/12, md:6/12, lg:4/12, xl:3/12}}>\n                    <Paper elevation='3' component={Stack} spacing={2} maxHeight={480}  sx={{p:1, borderRadius:'0.5rem'}} >\n                        <Stack direction='row' justifyContent='space-between'> \n                            <Typography>{item.code}</Typography>\n                            <Typography>{item.term}</Typography>\n                        </Stack>\n                        <Typography textAlign='center' fontSize='1.2rem' fontWeight='500' color={teal[900]}>{item.name}</Typography>\n                        <Typography textAlign='center' color={indigo[900]}>{item.summary}</Typography>\n                        <Typography textAlign='center' color={deepOrange[900]} >{item.concepts}</Typography>\n                    </Paper>\n                </Grid>\n                )}\n            </Grid> */}\n            <Box width='100%' px={4}>\n            <ResponsiveMasonry\n             columnsCountBreakPoints={{ 1:masonWidth}}>\n                 <Masonry>\n                 {data.map(item =>\n                    <Paper  elevation='3' m={1} component={Stack} minWidth={340} spacing={2}  sx={{p:1, borderRadius:'0.5rem'}} >\n                        <Stack direction='row' justifyContent='space-between'> \n                            <Typography>{item.code}</Typography>\n                            <Typography>{item.term}</Typography>\n                        </Stack>\n                        <Typography textAlign='center' fontSize='1.2rem' fontWeight='500' color={teal[900]}>{item.name}</Typography>\n                        <Typography textAlign='center' color={indigo[900]}>{item.summary}</Typography>\n                        <Typography textAlign='center' color={deepOrange[900]} >{item.concepts}</Typography>\n                    </Paper>\n                    )}\n                 </Masonry>\n            </ResponsiveMasonry>\n            </Box>\n        </Box>\n    )\n};\n\nexport default Courses;"]},"metadata":{},"sourceType":"module"}